{
  "name": "Echomd",
  "tagline": "A terminal oriented MD like syntax",
  "body": "# echomd [![build status](https://travis-ci.org/WebReflection/echomd.svg)](https://travis-ci.org/WebReflection/echomd)\r\nAn md like conversion tool for shell terminals.\r\n\r\nFully inspired by the work of John Gruber,\r\n`echomd` is a [Markdown](http://daringfireball.net/projects/markdown/) flavor\r\nthat targets terminals and consoles.\r\n\r\nThere are few inconsistencies across Windows, Mac, and Linux worlds,\r\nwhen it comes to highlight, underline, or emphasize text in console,\r\nand `echomd` is here to help and make it as simple as possible to improve\r\nconsole textual layout.\r\n\r\n![echomd -h](https://webreflection.github.io/echomd/echomd.png)\r\n\r\n### How to install it\r\n\r\nYou can chose between the [perl version](perl/echomd),\r\nvirtually natively available in every Linux and Mac terminal,\r\nor the [nodejs version](js/echomd), usable both as module\r\nand executable.\r\n\r\n#### ArchLinux perl version via [AUR](https://aur.archlinux.org/packages/echomd)\r\n`yaourt -S --noconfirm --needed echomd`\r\n\r\n#### Other Mac or Linux distributions (perl based)\r\n`curl -o- https://webreflection.github.io/echomd/install | bash`\r\n\r\n#### NodeJS version via [npm](https://www.npmjs.com/package/echomd)\r\n`npm install -g echomd`\r\n\r\nOnce installed, you can see a demo via `echomd -h` or `echomd --help`.\r\nPlease note the demo has duplicated surrounding chars on purpose,\r\nso you can remember how to replicate a specific feature.\r\n\r\n\r\n## Features\r\n\r\nFollowing the list of transformers implemented via `echomd`.\r\n\r\n#### Code blocks\r\nCode blocks are simply **not parsed** and preserved as they are.\r\nThese can be both multiline, via 3 backticks, or single line.\r\n\r\n    echomd 'Some text\r\n    ```\r\n    multi *line*\r\n    block\r\n    ```\r\n    and `single _line_` too'\r\n\r\n\r\n#### Horizontal lines\r\nUsing 3 or more `***` or `---` or `___`,\r\nwith optional spaces in between,\r\nproduces a 72 length straight line,\r\nsimulating somehow a browser `<hr>`\r\n\r\n#### Headers\r\nThere are two kind of headers, the most important one,\r\ndefined using only **one** `# Hashtag`,\r\nwhich is a fully highlighted and bold header,\r\nor two or more `## Hashtags` for less important headers,\r\nstill highlighted compared to the rest of the text.\r\n\r\n#### Bold\r\nUsing one or two asterisks would produce some bold text.\r\n`*this*` or `**this**` will produce identical text,\r\npreserving the semantic original meaning of the `*`,\r\nshowing up consistently bold in every platform.\r\n\r\nThe reason one star does not produce `<em>` tag equivalent,\r\nis that italic text is unfortunately not widely supported (Linux only)\r\nso it'd be bad UX for cross platform users if completely unrecognizable elsewhere.\r\n\r\n#### Underline\r\nFollowing same cross platform consistency reason,\r\nusing one or more underscores will produce an underlined text.\r\n`_this_` and `__this__`are equivalent, and it's possible combine\r\nboth bold and underline at once via `*_this_*` or `_*that*_`.\r\n\r\n#### Strike\r\nVisible on Linux only, and just to preserve original MD intent,\r\nit is possible to strike text via one or more `~`.\r\n\r\n#### Bullets list\r\nIt is possible to create a nice bullets list simply using 2 or more spaces or tabs.\r\n```\r\nThis is some text.\r\n  * this is a bullet\r\n  * this is another one\r\n    that will preserve spaces\r\n    to it's possible to go new line\r\n  * this is the last bullet\r\nAnd this is some text.\r\n```\r\nBear in mind, nested lists and all possible complicated and uncommon Web related scenarios are not supported. Keep It Simple (and handy) is the root of this project.\r\n\r\n#### Quotes\r\nIt is possible to quote some text simply starting a line with `> `.\r\n```\r\nThis is some text from somebody else.\r\n> brace yourselves, echomd is coming\r\n```\r\n\r\n#### Colors and Background Colors\r\nSoftware designed for the terminal cannot go too fancy with tags or styles,\r\nyet it can have colors **or** background colors (not both together).\r\n\r\nThe proposed syntax is pretty simple: `#green(text)` for text in green, and `!#green(text)` for text with a green background.\r\n\r\nThe list of currently supported colors (both text or background) is the same exposed through NodeJS `util/inspect.colors` module: _bold, italic, underline, inverse, white, grey, black, blue, cyan, green, magenta, red, yellow_.\r\n\r\n## As NodeJS moule\r\nThe module can output directly in console or produce the raw text using `require('echomd').raw` function.\r\n\r\n### License\r\n`echomd` is under the MIT style License (MIT).\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}